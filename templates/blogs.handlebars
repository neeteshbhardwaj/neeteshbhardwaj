<div id="fh5co-blog">
    <div class="container">
        <div class="row animate-box">
            <div class="col-md-8 col-md-offset-2 text-center fh5co-heading">
                <h2>Answers on Stackoverflow</h2>
                <p></p>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">
                <div class="fh5co-blog animate-box">
                    <a href="#" class="blog-bg" style="background-image: url(images/stackoverflow.png);" target="_blank"></a>
                    <div class="blog-text">
                        <span class="posted_on">Dec. 18th 2017</span>
                        <h3><a href="https://stackoverflow.com/questions/47862954/copyonwritearraylistcowal/47863975#47863975" target="_blank">CopyOnWriteArrayList (cowal)</a></h3>
                        <p>You are getting ConcurrentModificationException because ArrayList's iterator is fail-fast by design. Which means is that once the iterator is created, if the ArrayList is modified(addition or removal of element), it will throw ConcurrentModificationException.</p>
                        <ul class="stuff">
                            <li><i class="icon-thumbs-up"></i>2</li>
                            <li><i class="icon-eye2"></i>165</li>
                            <li><a href="https://stackoverflow.com/questions/47862954/copyonwritearraylistcowal/47863975#47863975" target="_blank">Read More<i class="icon-arrow-right22"></i></a></li>
                        </ul>
                    </div> 
                </div>
            </div>
            <div class="col-md-4">
                <div class="fh5co-blog animate-box">
                    <a href="https://stackoverflow.com/questions/47825178/using-thread-to-run-a-method/47831395#47831395" target="_blank" class="blog-bg" style="background-image: url(images/stackoverflow.png);"></a>
                    <div class="blog-text">
                        <span class="posted_on">Dec. 15th 2017</span>
                        <h3><a href="#">Using thread to run a method</a></h3>
                        <p>You can use CountDownLatch(suggested by @Xingbin Sun) and CyclicBarrier. both provides the way of thread synchronization. In your case you want threads to wait for finish writing name then proceed to content.</p>
                        <ul class="stuff">
                            <li><i class="icon-thumbs-up"></i>2</li>
                            <li><i class="icon-eye2"></i>87</li>
                            <li><a href="https://stackoverflow.com/questions/47825178/using-thread-to-run-a-method/47831395#47831395" target="_blank">Read More<i class="icon-arrow-right22"></i></a></li>
                        </ul>
                    </div> 
                </div>
            </div>
            <div class="col-md-4">
                <div class="fh5co-blog animate-box">
                    <a href="#" class="blog-bg" style="background-image: url(images/stackoverflow.png);"></a>
                    <div class="blog-text">
                        <span class="posted_on">Feb. 2oth 2020</span>
                        <h3><a href="https://stackoverflow.com/questions/60452087/spring-boot-generating-large-csv-file-drops-content-type-and-content-dispositi/60457481#60457481" target="_blank">spring boot - generating large csv file drops Content-Type and Content-Disposition headers</a></h3>
                        <p>Header Content-Length is missing from your response that's why large content is being fetched into chunks and browser displays into tab.</p>
                        <ul class="stuff">
                            <li><i class="icon-thumbs-up"></i>2</li>
                            <li><i class="icon-eye2"></i>30</li>
                            <li><a href="https://stackoverflow.com/questions/60452087/spring-boot-generating-large-csv-file-drops-content-type-and-content-dispositi/60457481#60457481" target="_blank">Read More<i class="icon-arrow-right22"></i></a></li>
                        </ul>
                    </div> 
                </div>
            </div>
        </div>
    </div>
</div>